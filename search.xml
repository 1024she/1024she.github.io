<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[前端利器之HTML(5)]]></title>
    <url>%2F2017%2F10%2F04%2F%E5%89%8D%E7%AB%AF%E5%88%A9%E5%99%A8%E4%B9%8BHTML-5%2F</url>
    <content type="text"><![CDATA[前端利器之 HTML 目录HTML 简介、基础结构、最基础标签和格式标签HTML 表单标签 HTML 框架标签和图像标签HTML 音频、视频标签和链接标签HTML 列表标签和表格标签 三、HTML 标签8.列表标签 讲解 ul 标签。123456无序列表：&lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt;&lt;/ul&gt;排序：给每个列表项前加上小符号，其中分为 Disc(默认)实心黑点，Circle 小圈，square 方点。 每个列表项使用 li 标签。 讲解 ol 标签。12345678有序列表：&lt;ol&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt;&lt;/ol&gt;默认的数字排序。type 属性 ：&quot;a&quot;表示以小写字母来排序，&quot;A&quot;大写字母排序，&quot;i&quot;小写罗马数字排序，&quot;I&quot;大写罗马数字排序。start 属性：决定起始位置。 讲解 dl 标签、dt 标签和 dd 标签。 dl 定义列表；dt 标题；dd描述(文字缩进显示)。12345&lt;dl&gt; &lt;dt&gt;太鸣法务官方网站&lt;/dt&gt; &lt;dd&gt;在线提供创业法律服务&lt;/dd&gt; &lt;dd&gt;一家互联网公司&lt;/dd&gt;&lt;/dl&gt; 9.表格标签讲解 table、caption、th、tr、td 标签。表格由 table 标签来定义。每个表格均有若干行，用 tr 标签定义，每行被分割为若干单元格，用 td 标签定义。td 指表格数据(table data)th 定义表头(table head)，显示为粗体居中的文本。caption 设置表格的标题。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;table border=&quot;1&quot;&gt; &lt;caption&gt;课程表&lt;/caption&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;星期一&lt;/th&gt; &lt;th&gt;星期二&lt;/th&gt; &lt;th&gt;星期三&lt;/th&gt; &lt;th&gt;星期四&lt;/th&gt; &lt;th&gt;星期五&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td rowspan=&quot;4&quot;&gt;上午&lt;/td&gt; &lt;td&gt;化学&lt;/td&gt; &lt;td&gt;数学&lt;/td&gt; &lt;td&gt;政治&lt;/td&gt; &lt;td&gt;物理&lt;/td&gt; &lt;td&gt;数学&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;数学&lt;/td&gt; &lt;td&gt;生物&lt;/td&gt; &lt;td&gt;英语&lt;/td&gt; &lt;td&gt;数学&lt;/td&gt; &lt;td&gt;化学&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;自习&lt;/td&gt; &lt;td&gt;语文&lt;/td&gt; &lt;td&gt;物理&lt;/td&gt; &lt;td&gt;生物&lt;/td&gt; &lt;td&gt;英语&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;物理&lt;/td&gt; &lt;td&gt;英语&lt;/td&gt; &lt;td&gt;自习&lt;/td&gt; &lt;td&gt;化学&lt;/td&gt; &lt;td&gt;体育&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td rowspan=&quot;2&quot;&gt;下午&lt;/td&gt; &lt;td&gt;语文&lt;/td&gt; &lt;td&gt;政治&lt;/td&gt; &lt;td&gt;作文&lt;/td&gt; &lt;td&gt;自习&lt;/td&gt; &lt;td&gt;生物&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;英语&lt;/td&gt; &lt;td&gt;化学&lt;/td&gt; &lt;td&gt;作文&lt;/td&gt; &lt;td&gt;体育&lt;/td&gt; &lt;td&gt;英语&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 以上代码可以得到图示的课程表：代码分析：属性 border=”1”，表明表格边框为 1 ；属性 rowspan=”4”，表明横跨 4 行；属性 colspan 表明横跨列。 讲解 thead、tbody、tfoot 标签。123456789101112131415161718192021222324&lt;table border=&quot;1&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Month&lt;/th&gt; &lt;th&gt;Savings&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;Sum&lt;/td&gt; &lt;td&gt;$180&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;January&lt;/td&gt; &lt;td&gt;$100&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;February&lt;/td&gt; &lt;td&gt;$80&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; thead 标签定义表格的表头。tfoot 标签定义表格的页脚（脚注或表注）。tbody 标签表格主体（正文）。注释：如果您使用 thead、tfoot 以及 tbody 元素，您就必须使用全部的元素。它们的出现次序是：thead、tfoot、tbody，这样浏览器就可以在收到所有数据前呈现页脚了。您必须在 table 元素内部使用这些标签。注释：thead 内部必须拥有 tr 标签！ 讲解 col 和 colgroup 标签。col 标签为表格中一个或多个列定义属性值。只能在 table 或 colgroup 元素中使用 col 标签。col 元素是仅包含属性的空元素。如需创建列，您就必须在 tr 元素内部规定 td 元素。12345678910111213141516col 元素为表格中的三个列规定了不同的对齐方式：&lt;table width=&quot;100%&quot; border=&quot;1&quot;&gt; &lt;col align=&quot;left&quot; /&gt; &lt;col align=&quot;left&quot; /&gt; &lt;col align=&quot;right&quot; /&gt; &lt;tr&gt; &lt;th&gt;ISBN&lt;/th&gt; &lt;th&gt;Title&lt;/th&gt; &lt;th&gt;Price&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3476896&lt;/td&gt; &lt;td&gt;My first HTML&lt;/td&gt; &lt;td&gt;$53&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; colgroup 标签用于对表格中的列进行组合，以便对其进行格式化。colgroup 标签只能在 table 元素中使用。1234567891011121314151617两个 colgroup 元素为表格中的三列规定了不同的对齐方式和样式（注意第一个 colgroup 元素横跨两列）&lt;table width=&quot;100%&quot; border=&quot;1&quot;&gt; &lt;colgroup span=&quot;2&quot; align=&quot;left&quot;&gt;&lt;/colgroup&gt; &lt;colgroup align=&quot;right&quot;&gt;&lt;/colgroup&gt; &lt;col align=&quot;left&quot; /&gt; &lt;col align=&quot;right&quot; /&gt; &lt;tr&gt; &lt;th&gt;ISBN&lt;/th&gt; &lt;th&gt;Title&lt;/th&gt; &lt;th&gt;Price&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3476896&lt;/td&gt; &lt;td&gt;My first HTML&lt;/td&gt; &lt;td&gt;$53&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端利器之HTML(4)]]></title>
    <url>%2F2017%2F10%2F04%2F%E5%89%8D%E7%AB%AF%E5%88%A9%E5%99%A8%E4%B9%8BHTML-4%2F</url>
    <content type="text"><![CDATA[前端利器之 HTML 目录HTML 简介、基础结构、最基础标签和格式标签HTML 表单标签 HTML 框架标签和图像标签HTML 音频、视频标签和链接标签HTML 列表标签和表格标签 三、HTML 标签6.音频、视频标签 首先介绍一下 HTML 多媒体。多媒体来自多种不同的格式。可以是听到或看到的任何内容，文字、图片、音乐、音效、录音、电影、动画等。确定多媒体类型的最常用的方法是查看文件扩展名。以下是常用的视频格式和音频格式：123456789101112131415161718常用的视频格式AVI .aviWMV .wmvMPEG .mpg/.mpegQuickTime .movRealVideo .rm/.ramFlash .swf/.flvMpeg-4 .mp4MP4 格式是一种新的即将普及的因特网视频格式。HTML5 、Flash 播放器以及优酷等视频网站均支持它。常用的音频格式MIDI .mid/.midiRealAudio .rm/.ramWave .wavWMA .wmaMp3 .mp3/.mpgaWAVE 是因特网上最受欢迎的无压缩声音格式，所有流行的浏览器都支持它。MP3 是最新的压缩录制音乐格式。 讲解：embed 标签。12345播放音频：&lt;embed src=&quot;song.mp3&quot; width=&quot;200&quot; height=&quot;200&quot; autostart=&quot;true&quot; loop=&quot;true&quot; /&gt;播放 flash 视频：&lt;embed src=&quot;movie.swf&quot; width=&quot;200&quot; height=&quot;200&quot; loop=&quot;true&quot; quality=&quot;high&quot; /&gt; 讲解：object 标签。它的作用是给浏览器加载插件。12345678910111213播放音频：&lt;object data=&quot;song.mp3&quot; type=&quot;&quot;&gt; &lt;param name=&quot;src&quot; value=&quot;song.mp3&quot;&gt; &lt;param name=&quot;autoplay&quot; value=&quot;true&quot;&gt;&lt;/object&gt;播放 flash 视频：&lt;object classid=&quot;movie.swf&quot; width=&quot;200&quot; height=&quot;200&quot; codebase=&quot;&quot;&gt; &lt;param name=&quot;movie&quot; value=&quot;movie.swf&quot;&gt; &lt;param name=&quot;play&quot; value=&quot;true&quot;&gt; &lt;param name=&quot;loop&quot; value=&quot;true&quot;&gt; &lt;param name=&quot;quality&quot; value=&quot;high&quot;&gt;&lt;/object&gt; 讲解：audio 标签。123456&lt;audio controls=&quot;controls&quot; height=&quot;100&quot; width=&quot;100&quot;&gt; &lt;source src=&quot;song.mp3&quot; type=&quot;audio/mp3&quot; /&gt; &lt;source src=&quot;song.ogg&quot; type=&quot;audio/ogg&quot; /&gt; &lt;embed src=&quot;song.mp3&quot; height=&quot;100&quot; width=&quot;100&quot; /&gt;&lt;/audio&gt;上面的例子使用了两个不同的音频格式。HTML5 &lt;audio&gt; 元素会尝试以 mp3 或 ogg 来播放音频。如果失败，代码将回退尝试 &lt;embed&gt; 元素。 讲解：video 标签。123456789&lt;video width=&quot;320&quot; height=&quot;240&quot; controls=&quot;controls&quot;&gt; &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot; /&gt; &lt;source src=&quot;movie.ogg&quot; type=&quot;video/ogg&quot; /&gt; &lt;source src=&quot;movie.wbem&quot; type=&quot;video/wbem&quot; /&gt; &lt;object data=&quot;movie.mp4&quot; width=&quot;320&quot; height=&quot;240&quot;&gt; &lt;embed src=&quot;movie.sef&quot; width=&quot;320&quot; height=&quot;240&quot; /&gt; &lt;/object&gt;&lt;/video&gt;上例中使用了 4 中不同的视频格式。HTML 5 &lt;video&gt; 元素会尝试播放以 mp4、ogg 或 webm 格式中的一种来播放视频。如果均失败，则回退到 &lt;embed&gt; 元素。 更多关于视频、音频标签的知识可以查看W3school 7.链接标签HTML 使用超级链接与网络上的另一个文档相连。点击链接可以从一张页面跳转到另一张页面。讲解 a 标签。&lt;a href=&quot;链接地址&quot; title=&quot;提示文字&quot; name=&quot;书签&quot; target=&quot;链接打开方式&quot;&gt;链接文本或图片&lt;/a&gt;title 属性：超链接添加提示文字。name 属性：超链接实现书签。锚(anchor)：用于在单个页面内不同位置的跳转，一个页面可以定义多个锚。也可使用 id 属性替代，命名锚同样有效。target 属性：超链接打开方式。取值分别为：target=”_self”(默认，本页打开)、target=”_blank”(在新窗口打开)。]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端利器之HTML(3)]]></title>
    <url>%2F2017%2F10%2F02%2F%E5%89%8D%E7%AB%AF%E5%88%A9%E5%99%A8%E4%B9%8BHTML-3%2F</url>
    <content type="text"><![CDATA[前端利器之 HTML 目录HTML 简介、基础结构、最基础标签和格式标签HTML 表单标签 HTML 框架标签和图像标签HTML 音频、视频标签和链接标签HTML 列表标签和表格标签 三、HTML 标签4.框架标签 HTML 框架，通过使用框架，可以在同一个浏览器窗口中显示多个页面。(top.html、left.html、right.html 和 foot.html)创建框架网页的步骤：1.创建各个子窗口的 HTML 文件。2.创建整个框架文件再分别引用子窗口文件。 讲解：frame 标签和 frameset 标签。12345678创建框架页面的基本语法：&lt;frameset cols=&quot;25%,50%,*&quot; rows=&quot;50%,*&quot; border=&quot;5&quot;&gt; &lt;frame src=&quot;top.html&quot;&gt;&lt;/frameset&gt;* 表示剩余的百分比假如一个框架有可见边框，可以拖动边框来改变它的大小。为了避免这种情况发生，可在&lt;frame&gt;中加入：noresize=&quot;noresize&quot;。注：&lt;frameset&gt;标签不能与&lt;body&gt;标签同时使用，除非在&lt;frameset&gt;中使用&lt;noframes&gt; 讲解：noframes 标签。为不支持框架的浏览器添加 noframes 标签。12345&lt;noframes&gt; &lt;body&gt; 此浏览器不支持框架！ &lt;/body&gt;&lt;/noframes&gt; 讲解：iframe 标签。用于在网页内显示网页12345678&lt;iframe name=&quot;&quot; scrolling=&quot;yes&quot; src=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;height 和 width 属性设置它的高度和宽度，单位默认像素，也可用百分比iframe 标签常用属性：frameborder ： 规定是否显示框架的边框，1 代表显示，0 代表不显示name ： 规定 iframe 的名称scrolling ： 规定是否显示滚动条src ： URL 地址 5.图像标签讲解：img 标签。1234&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;图像标签：&lt;img&gt;，源属性：src=source，src 的值是 URL 地址替换文本属性(Alt)：用来为图像定义一串预备的可替换的文本，当浏览器无法载入图像时，替换文本属性告诉用户失去的信息，浏览器将显示替换的文本。还可加入 height 和 width 属性设置图片高和宽。 讲解：map 标签和 area 标签。123456789101112创建图像映射，点击图片不同地方跳转到不同的地方，一张图片可创建带有可供点击区域的图像地图，每个区域就是一个超链接。&lt;map&gt;指定图片，&lt;area&gt;指定超链接区域。例子： &lt;body background=&quot;图片.gif&quot;&gt; &lt;img src=&quot;./julizi.png&quot; usemap=&quot;#lizi&quot;/&gt; &lt;map name=&quot;lizi&quot; id=&quot;lizi&quot;&gt; &lt;area shape=&quot;rect&quot; coords=&quot;50,10,100,60&quot; href=&quot;img.html&quot; target=&quot;_blank&quot; &lt;/map&gt;&lt;/body&gt;shape 指定超链接区域形状，可取值为：rect 矩形 circle 圆形 poly 多边形 default 整个图像区域。coords 指定超链接区域坐标，coords 有 4 个值，分别用逗号隔开，表示矩形区域左上角 x 坐标、左上角 y 坐标、右下角 x 坐标和右下角 y 坐标。 讲解：canvas 标签。canvas 标签使用 JavaScript 在网页上绘制图形。&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;&lt;/canvas&gt;canvas 本身不具备绘图能力，必须在 JavaScript 内部完成12345678&lt;script type=&quot;text/javascript&quot;&gt; var c = document.getElementById(&quot;myCanvas&quot;); # 使用 id 来寻找 canvas 元素 var cxt = c.getContent(&quot;2d&quot;); # 创建 content 对象 cxt.fillStyle=&quot;#FF0000&quot;; # fillStyle 将其染成红色，它规定了形状、位置和尺寸。 cxt.fillRect(0,0,150,75); # 绘制 150x75 的矩形&lt;/script&gt;上面的 fillRect 方法拥有参数 (0,0,150,75)。意思是：在画布上绘制 150x75 的矩形，从左上角开始 (0,0)。 更多关于 canvas 标签的知识可查看 W3schoolcanvas 涉及到 JavaScript 的知识，所以我之后会单独写一篇 canvas 的博文。]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端利器之HTML(2)]]></title>
    <url>%2F2017%2F10%2F02%2F%E5%89%8D%E7%AB%AF%E5%88%A9%E5%99%A8%E4%B9%8BHTML-2%2F</url>
    <content type="text"><![CDATA[前端利器之 HTML 目录HTML 简介、基础结构、最基础标签和格式标签HTML 表单标签 HTML 框架标签和图像标签HTML 音频、视频标签和链接标签HTML 列表标签和表格标签 三、HTML 标签3.表单标签 讲解：form 标签。1234567891011121314151617181920212223242526272829303132333435&lt;form action=&quot;表单提交地址&quot; method=&quot;提交方法&quot;&gt; ...文本框、按钮等表单元素...&lt;/form&gt;form 标签的属性：accept-charset ： 在被提交表单中使用的字符集(默认:页面字符集)action ： 指定表单提交后由服务器上的程序进行处理autocomplete : 浏览器应该自动完成表单(默认:开启)enctype ： 指定表单数据的编码方式(默认:url-encoded)method ： 指定向服务器提交的方式(GET、POST)name : 识别表单的名称(对于 DOM 使用:document.forms.name)novalidate ： 浏览器不验证表单target ： action 属性中地址的目标(默认:_self)name 属性如果想要正确地被提交，每个输入字段必须设置一个 name 属性。本例只会提交 &quot;Last name&quot; 的输入字段：&lt;form action=&quot;action_page.php&quot;&gt; First name: &lt;br&gt; &lt;input type=&quot;text&quot; value=&quot;Mickey&quot;&gt; &lt;br&gt; Last name: &lt;br&gt; &lt;input type=&quot;text&quot; name=&quot;lastname&quot; value=&quot;Mouse&quot;&gt; &lt;br&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;使用 GET（默认方法）：如果表单提交是被动的（比如搜索引擎查询），并且没有敏感信息。使用 GET 时，表单数据在页面地址栏中是可见的：action_page.php?firstname=Mickey&amp;lastname=Mouse注：GET 最适合少量数据的提交，浏览器会设定容量限制。使用 POST：如果表单正在更新数据，或者包含敏感信息（例如密码）。POST 的安全性更加，因为在页面地址栏中被提交的数据是不可见的。 讲解：input 标签。123456789101112131415161718192021222324252627282930&lt;input type=&quot;text&quot;&gt; 单行文本框&lt;input type=&quot;password&quot;&gt; 密码输入框，password 字段中的字符会被做掩码处理（显示为星号或实心圆）。&lt;input type=&quot;hidden&quot;&gt; 隐藏域&lt;input type=&quot;radio&quot;&gt; 单选框&lt;input type=&quot;checkbox&quot;&gt; 复选框，允许用户在有限数量的选项中选择零个或多个选项&lt;input type=&quot;image&quot;&gt; 图像域，可设置宽高&lt;input type=&quot;file&quot;&gt; 文件上传域&lt;input type=&quot;submit&quot;&gt; 提交&lt;input type=&quot;reset&quot;&gt; 重置&lt;input type=&quot;button&quot;&gt; 普通按钮&lt;input type=&quot;number&quot;&gt; 数字值输入&lt;input type=&quot;data&quot;&gt; 日期的输入&lt;input type=&quot;color&quot;&gt; 颜色的输入&lt;input type=&quot;range&quot;&gt; 一定范围值的输入&lt;input type=&quot;month&quot;&gt; 允许选择月份和年份&lt;input type=&quot;week&quot;&gt; 允许选择周和年&lt;input type=&quot;time&quot;&gt; 选择无时区的时间&lt;input type=&quot;datetime&quot;&gt; 选择有时区的时间&lt;input type=&quot;email&quot;&gt; 电子邮件的输入&lt;input type=&quot;search&quot;&gt; 用于搜索字段&lt;input type=&quot;tel&quot;&gt; 电话号码的输入&lt;input type=&quot;url&quot;&gt; URL 地址的输入input 标签常用属性：checked ： 设置单、复选框disable ： 设置首次加载时禁用此元素maxlegth ： 允许文本框输入最大的字符数readobly ： 文本框的值只读，不允许修改size ： 指定元素长度src ： 链接地址 讲解：textarea 标签。定义多行文本的输入控件。&lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;列宽&quot; rows=&quot;行宽&quot; readonly=&quot;只读&quot;&gt;&lt;/textarea&gt; 讲解：button 标签。123456&lt;button type=&quot;button&quot; onclick=&quot;alert(&apos;hello&apos;)&quot;&gt;Click me&lt;/button&gt;button 标签常用属性：disabled : 指定是否禁用此元素name : 指定按钮唯一名称type : 指定按钮类型，只能是 button、reset、submit 讲解：select 标签。列表框和下拉菜单。12345678910111213141516&lt;select name=&quot;指定列表名称&quot; size=&quot;行数&quot; id=&quot;&quot;&gt; &lt;option value=&quot;选项值&quot;&gt;&lt;/option&gt;&lt;/select&gt;select 标签常用属性：multipe : 设置列表框是否允许多选size : 指定列表内同时显示多少列表项例子：&lt;select name=&quot;city&quot; id=&quot;city&quot; multipe=&quot;multipe&quot; size=&quot;3&quot;&gt; &lt;option value=&quot;city&quot;&gt;北京&lt;/option&gt; &lt;option value=&quot;city&quot;&gt;天津&lt;/option&gt; &lt;option value=&quot;city&quot;&gt;上海&lt;/option&gt; &lt;option value=&quot;city&quot;&gt;广州&lt;/option&gt;&lt;/select&gt;注：下拉菜单少一个属性 size=&quot;3&quot;，列表框则具有 size 属性 讲解：optgroup 标签和 option 标签。121.&lt;option&gt;用于定义列表框选项或菜单项。2.&lt;optgroup&gt;用于定义列表框选项或菜单项组。必填属性：label 讲解：label标签。例子：&lt;label for=&quot;password&quot;&gt;密码框&lt;/label&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; size=&quot;5&quot; /&gt; 讲解：fieldset 标签和 legend 标签。fieldset 组合表单数据，legend 定义标题。123456789101112&lt;form action=&quot;action_page.php&quot;&gt; &lt;fieldset&gt; &lt;legend&gt;Personal information&lt;/legend&gt; First name: &lt;br&gt; &lt;input type=&quot;text&quot; name=&quot;firstname&quot; value=&quot;Mickey&quot;&gt; &lt;br&gt; Last name: &lt;br&gt; &lt;input type=&quot;text&quot; name=&quot;lastname&quot; value=&quot;Mouse&quot;&gt; &lt;br&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt; &lt;/fieldset&gt;&lt;/form&gt;]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端利器之HTML(1)]]></title>
    <url>%2F2017%2F10%2F02%2F%E5%89%8D%E7%AB%AF%E5%88%A9%E5%99%A8%E4%B9%8BHTML-1%2F</url>
    <content type="text"><![CDATA[前端利器之 HTML 目录HTML 简介、基础结构、最基础标签和格式标签HTML 表单标签 HTML 框架标签和图像标签HTML 音频、视频标签和链接标签HTML 列表标签和表格标签 一、HTML 简介HTML 是超文本标记语言(Hyper Text Markup Language)，是用来描述网页的语言。它并非编程语言不具有逻辑性，而是一套标记标签，超文本内可包含图片、链接、音乐等非文字元素。 二、HTML 基本结构讲解：这就是一个最简单的 HTML 文档，现在逐一讲解，第 1 行的 &lt;!DOCTYPE html&gt; 是 HTML 文档引用的规范；第 2 行和第 10 行是成对出现的 html 标签，它是 HTML 文档的根元素标签；第 3 行和第 6 行是成对出现的 head 标签，是 HTML 文档的头部标签；第 7 行和第 9 行是成对出现的 body 标签，是 HTML 文档的主体标签；第 8 行是段落标签，成对出现。 1. head 标签内包含的元素title 标签：能在浏览器窗口中看到，提供页面被添加到收藏夹时显示的标题，与 SEO 优化有关。meta 标签：定义页面的元信息，主要有三个属性：12345678910111213141516http-equiv ： 指定元信息的名称，帮助浏览器正确处理网页内容。name ： 指定元信息的名称，可随意指定。content ： 指定元信息的值。例子：描述文档类型和字符编码&lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot; charset=&quot;UTF-8&quot; /&gt;&lt;/head&gt;例子：描述搜索关键字信息 (关键字一般不超过 5 个)&lt;head&gt; &lt;title&gt; 壹零贰肆 &lt;/title&gt; &lt;meta name=&quot;author&quot; content=&quot;tularrrrr&quot; /&gt; &lt;meta name=&quot;keyword&quot; content=&quot;xxx&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;xxx&quot; /&gt;&lt;/head&gt; script 标签：以后介绍。link 标签：以后介绍。style 标签：以后介绍。 三、HTML 标签1. 最基础的 html 标签讲解：p 标签与 br 标签的异同。相同：都具有换行的属性及作用，区别：br 标签单独使用，而 p 标签必须成对使用；br 标签表示小换行，相当于 1 个回车，而 p 标签表示大换行，相当于 2 个回车。 2. 格式标签12345678910111213141516171819202122232425262728293031323334格式标签&lt;acronym&gt; 定义只取首字母的缩写&lt;abbr&gt; 定义缩写&lt;address&gt;&lt;/address&gt; 定义文档作者或拥有者的联系信息,通常以斜体显示，前后添加折行&lt;b&gt;&lt;/b&gt; 定义粗体文本&lt;bdi&gt;&lt;/bdi&gt; 定义文本方向，使其脱离周围文本的方向设置，HTML5&lt;bdo dir=&quot;&quot;&gt;&lt;/bdo&gt; 定义文字方向，用于双向重写，覆盖当前文本方向&lt;big&gt; 定义大号文本&lt;blockquote&gt;&lt;/blockquote&gt;定义长的引用&lt;cite&gt;&lt;/cite&gt; 定义引用(citation)，定义著作标题，斜体显示&lt;code&gt;&lt;/code&gt; 定义计算机代码文本，不保留多余空格和折行&lt;del&gt;&lt;/del&gt; 定义被删除文本&lt;dfn&gt;&lt;/dfn&gt; 定义项目&lt;em&gt;&lt;/em&gt; 定义强调文本&lt;i&gt;&lt;/i&gt; 定义斜体文本&lt;ins&gt;&lt;/ins&gt; 定义被插入文本&lt;kbd&gt;&lt;/kbd&gt; 定义键盘文本&lt;mark&gt;&lt;/mark&gt; 定义有记号的文本，HTML5&lt;meter&gt;&lt;/meter&gt; 定义预定义范围内的度量，HTML5&lt;pre&gt;&lt;/pre&gt; 定义预格式文本&lt;progress&gt;&lt;/progress&gt; 定义任何类型的任务的进度，HTML5&lt;q&gt;&lt;/q&gt; 定义短的引用&lt;rp&gt;&lt;/rp&gt; 定义若浏览器不支持 ruby 元素显示的内容，HTML5&lt;rt&gt;&lt;/rt&gt; 定义 ruby 注释的解释，HTML5&lt;ruby&gt;&lt;/ruby&gt; 定义 ruby 注释&lt;samp&gt;&lt;/samp&gt; 定义计算机代码样本&lt;small&gt;&lt;/small&gt; 定义小号字体&lt;strong&gt;&lt;/strong&gt; 定义语气更为强烈的强调文本&lt;sup&gt;&lt;/sup&gt; 定义上标文本&lt;sub&gt;&lt;/sub&gt; 定义下标文本&lt;time&gt;&lt;/time&gt; 定义日期/时间，HTML5&lt;tt&gt; 定义打字机文本&lt;var&gt;&lt;/var&gt; 定义文本的变量部分&lt;wbr&gt;&lt;/wbr&gt; 定义可能的换行符，HTML5]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我用 Django 搭建博客的全过程(3)]]></title>
    <url>%2F2017%2F09%2F03%2F%E6%88%91%E7%94%A8Django%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B-3%2F</url>
    <content type="text"><![CDATA[我用 Django 搭建博客的全过程(1)我用 Django 搭建博客的全过程(2)接着写最后部分，还是继续附上我在 README 上写的本项目将要实现的一些功能： 开发环境搭建 创建 Django 项目和 App 设计数据库 创建超级用户及后台管理 views 和 urls 的工作原理 Templates 模板 配置 MarkDown 归档，列出当前博客中所有文章并且显示时间 About 界面 标签分类 RSS 和分页、Readmore 我没做成功的：搜索功能 这里讲第 7 点到 11点。 一7.配置 MarkDown下载安装 MarkDown $ sudo pip install markdown 在 article 文件夹下建 templatetags 文件夹，在 templatetags 建 init.py(指明是 py 的包文件，init 前后加两下划线)，在 templatetags 文件夹中新建 custom_markdown.py 文件。添加代码：123456789101112131415import markdownfrom django import templatefrom django.template.defaultfilters import stringfilterfrom django.utls.encoding import force_textfrom django.utls.safestring import mark_saferegister = template.Library() #自定义 filter 时必须加上@register.filter(is_safe=True) #注册 template filter@stringfilter #希望字符串作为参数def custom_markdown(value): return mark_safe(markdown.markdown(value, extensions = [&apos;markdown.extensions.fencd_code&apos;,&apos;markdown.extensions.codehilite&apos;], safe_mode=True, enable_attributes=False)) 在 settings.py 中的 INSTALLED_APPS 列表最后添加article.templatetags.custom_markdown 见图修改 post.html修改 home.html 8.归档，列出当前博客中所有文章并且显示时间在 templates 文件夹下新建 archives.html 见图修改 views.py，其他不变新增代码，见图修改 urls.py 其他不变新增代码，url(r&#39;^archives/$&#39;,views.archives, name=&#39;archives&#39;) 9.About 界面写到这里，这个自我介绍的界面就很简单啦！在 templates 下新建 about.html修改 views.py 其他不变新增代码12def about(request): return render(request,&apos;about.html&apos;) 修改 urls.py 其他不变新增代码url(r&#39;^about/$&#39;, views.about, name=&#39;about&#39;) 10.标签分类实现功能：点击对应的标签按钮，跳转到相关标签的文章罗列。在 templates 下新建 tag.html 文件，见图讲解：通过传入对应点击的 tag，对 tag 进行查询。在 home.html，post.html，archive.html 文件中将 tag 对应的超链接代码均修改为{% url "search_tag" tag=post.category %}在 views.py 新增代码，见图在 urls.py 新增代码url(r&#39;^tag(?P&lt;tag&gt;\w+)/$&#39;,views.search_tag, name=&#39;search_tag&#39;) 11.RSS 和分页、Readmore1.RSS 功能Django 中的 RSS 功能，可以从高层框架的聚合 Feed 框架中找到(The syndication feed framework)，上层 Feed 生成框架可以直接应用 Feed 类，直接继承 Feed 在其中定义自己的方法。在 views.py 中定义类(其他不变新增以下代码)在 models.py中重写 get_absolute_url 方法修改 urls.py 见图最后，在 base.html 中添加 RSS 按钮，不细说啦，这个很简单就在 nav 下添加就好。 2.分页当博客文章较多的时候，我们并不希望在主页上显示全部的博客文章，而是希望能够每页显示固定的文章数目。简要说一下思路方法：首先添加包，然后重写 home 方法，最后修改模板。修改 views.py(添加包)的 home 函数修改 home.html12345678910111213141516171819202122232425262728293031323334353637383940&lt;!--home.html--&gt;&#123;% extends &quot;base.html&quot; %&#125;&#123;% load custom_markdown %&#125;&#123;% block content %&#125;&lt;div class=&quot;posts&quot;&gt; &#123;% for post in post_list %&#125; &lt;section class=&quot;post&quot;&gt; &lt;header class=&quot;post-header&quot;&gt; &lt;h2 class=&quot;post-title&quot;&gt;&lt;a href=&quot;&#123;% url &quot;detail&quot; id=post.id %&#125;&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;&lt;/h2&gt; &lt;p class=&quot;post-meta&quot;&gt; Time: &lt;a class=&quot;post-date_time&quot; href=&quot;#&quot;&gt;&#123;&#123; post.date_time |date:&quot;Y-m-d&quot;&#125;&#125;&lt;/a&gt; &lt;a class=&quot;post-category post-category-yui&quot; href=&quot;&#123;% url &quot;search_tag&quot; tag=post.category %&#125;&quot;&gt;&#123;&#123; post.category|title &#125;&#125;&lt;/a&gt; &lt;/p&gt; &lt;/header&gt; &lt;div class=&quot;post-description&quot;&gt; &lt;p&gt; &#123;&#123; post.content|custom_markdown|truncatewords_html:20 &#125;&#125; &lt;/p&gt; &lt;/div&gt; &lt;a class=&quot;pure-button&quot; href=&quot;&#123;% url &quot;detail&quot; id=post.id %&#125;&quot;&gt;more&lt;/a&gt; &lt;/section&gt; &#123;% endfor %&#125; &#123;% if post_list.object_list and post_list.paginator.num_pages &gt; 1 %&#125; &lt;div&gt; &lt;ul class=&quot;pager&quot;&gt; &#123;% if post_list.has_previous %&#125; &lt;li&gt;&lt;a href=&quot;?page=&#123;&#123; post_list.previous_page_number &#125;&#125;&quot;&gt;Pre Page&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &#123;% if post_list.has_next %&#125; &lt;li&gt;&lt;a href=&quot;?page=&#123;&#123; post_list.next_page_number &#125;&#125;&quot;&gt;Next Page&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &lt;/ul&gt; &lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt;&#123;% endblock %&#125; 3.Readmore之前已经添加了 Readmore 按钮，我用的是 more，只需要一步修改 home.html 中变量的过滤器将正文截断设置为 10，{{ post.content|custom_markdown|truncatewords_html:20 }} 二总共 11 点终于写完了，完成一件事很开心啊！我没做成功的‘搜索功能’我还会继续研究，到现在一个 Django 搭建的博客基本完成了，未来还有许多功能可以尝试，比如说：1.留言板(连接数据库)2.添加注册登录功能日后研究 Django 还会继续更新到此博客上。]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我用 Django 搭建博客的全过程(2)]]></title>
    <url>%2F2017%2F08%2F30%2F%E6%88%91%E7%94%A8Django%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B-2%2F</url>
    <content type="text"><![CDATA[一附上我在 README 上写的本项目将要实现的一些功能： 开发环境搭建 创建 Django 项目和 App 设计数据库 创建超级用户及后台管理 views 和 urls 的工作原理 Templates 模板 配置 MarkDown 归档，列出当前博客中所有文章并且显示时间 About 界面 标签分类 RSS 和分页、Readmore 我没做成功的：搜索功能 这篇主要讲解第 5 点至第 6 点，上篇请查看： 我用 Django 搭建博客的全过程(1) 二5. views 和 urls 的工作原理网页程序的逻辑：浏览器–&gt;url–&gt;view–&gt;model–&gt;数据库浏览器&lt;–Django Web&lt;–Templates渲染&lt;–view&lt;–model&lt;–数据库 用户通过浏览器发出请求，urls 用来指明要调用的程序逻辑，views 用来处理程序逻辑然后呈现到 Templates，Templates 以 html+CSS 形式呈现给用户。 1.简单的 views 和 urls。在 views.py 中编写代码123456from django.shortcuts import renderfrom django.http import HttpResponse # new#Create your views here.def home(request): # new return HttpResponse(&quot;Hello World, Django&quot;) 讲解：第二行引入 HttpResponse，用来向网页返回内容；第五行定义了 home() 函数，参数为 request，与请求有关，包含了 get 或 post 方法，在这里直接返回字符串”Hello World, Django” 然后再编辑 urls.py123456789from django.conf.urls import urlfrom django.contrib import adminfrom article import views # newurppatterns = [ url(r&apos;^admin/&apos;,admin.site.urls), url(r&apos;^$&apos;,views.home), # new] 讲解：url() 有四个参数，两个是必须的：regex 和 view，两个是可选的：kwargs 和 namea.regex 是 regular expression 的简写,这是字符串中的模式匹配的一种语法, Django 将请求的 URL 从上至下依次匹配列表中的正则表达式，直到匹配到一个为止。b.view 当 Django 匹配了一个正则表达式就会调用指定的 view 逻辑, 上面代码中会调用 article/views.py 中的 home 函数。c.kwargs 任意关键字参数可传一个字典至目标 view。d.name 命名你的 URL, 使 url 在 Django 的其他地方使用, 特别是在模板中。 访问： 127.0.0.1:8000 (这是我分到的端口，你用你们自己的)界面上出现”Hello World, Django”即为成功。 2.尝试给 view 中的函数传入参数。在 views.py 中编写代码123456789from django.shortcuts import renderfrom django.http import HttpResponse #Create your views here.def home(request): return HttpResponse(&quot;Hello World, Django&quot;)def detail(request, my_args): # new return HttpResponse(&quot;You&apos;re looking at my_args %s.&quot; % my_args) 然后再编辑 urls.py12345678910from django.conf.urls import urlfrom django.contrib import adminfrom article import views urppatterns = [ url(r&apos;^admin/&apos;,admin.site.urls), url(r&apos;^$&apos;,views.home), url(r&apos;^(?P&lt;my_args&gt;\d+)/$&apos;,views.detail, name=&apos;detail&apos;), ] 讲解：^(?P\d+)/$表示将传入的一位或多位数字作为参数传递到 views 中的 detail。访问127.0.0.1:8000/750界面上得到”You’re looking at my_args 750.”即为成功，750 是我随机输入的。 3.尝试传递参数访问数据库。在 views.py 中编写代码12345678910111213from django.shortcuts import renderfrom django.http import HttpResponse from article.models import Article # new #Create your views here.def home(request): return HttpResponse(&quot;Hello World, Django&quot;)def detail(request, my_args): post = Article.objects.all()[int(my_args)] # new str = (&quot;title = %s,category = %s, date_time = %s, content = %s&quot; # new % (post.title, post.category, post.date_time, post.content)) return HttpResponse(str) # 修改 到这里的时候最好自己在 admin 后台管理界面多增加几个 Article 对象，然后访问127.0.0.1:8000/1/，/1/是我随机输入的，会返回你在 admin 后台管理对应的 Article 对象，Article.objects.all() 返回的是一个列表。 小结：1.创建 models ，利用 Models 与数据库进项数据交互。2.创建 Admin ，利用 Admin 来管理后台数据。3.urls.py 用来解析不同的 URL ，并根据不同的 URL 分配 views.py 中的函数进行处理。 6. Templates 模板第 6 点占了很大的篇幅，请做好心里准备。先在 article 文件夹下新增 templates 文件夹，用来放置模板文件,然后在 templates 文件夹下新增一个 test.html123$ cd article/article$ mkdir templates/templates$ subl test.html #我用的编辑器是sublime，你可以自己的编辑器打开 test.html 其中{{ current_time }}是 Django Templates 中变量的表示方法在 views.py 中编写代码1234567891011121314151617from django.shortcuts import renderfrom django.http import HttpResponse from article.models import Article from datetime import datetime # new #Create your views here.def home(request): return HttpResponse(&quot;Hello World, Django&quot;)def detail(request, my_args): post = Article.objects.all()[int(my_args)] str = (&quot;title = %s,category = %s, date_time = %s, content = %s&quot; % (post.title, post.category, post.date_time, post.content)) return HttpResponse(str) def test(request): # new return render(request,&apos;test.html&apos;,&#123;&apos;current_time&apos;:datetime.now()&#125;) 然后再编辑 urls.py1234567891011from django.conf.urls import urlfrom django.contrib import adminfrom article import views urppatterns = [ url(r&apos;^admin/&apos;,admin.site.urls), url(r&apos;^$&apos;,views.home), url(r&apos;^(?P&lt;my_args&gt;\d+)/$&apos;,views.detail, name=&apos;detail&apos;), url(r&apos;^test/$&apos;, views.test), # new ] 访问127.0.0.1:8000/test/得到背景色为蓝色的”Hello Django”和传入的实时时间。 还有不要忘了设置 templates 的位置设置 settings.py12345TEMPLATES = [ &#123; &apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;).replace(&apos;\\&apos;,&apos;/&apos;)], &#125;] 特别强调这一点特别重要，我因为配置 templates 的位置折腾了一晚上，主要是 Django 版本的问题，不同版本设置还有些细微差别。 经过上面的例子大概了解了 templates 模板，现在来正式编写：我总结了一个步骤：1.先写 templates 中的 html等2.编辑 views.py，添加函数逻辑3.最后编辑对应的 urls.py 模板的使用，在 templates 文件夹下新增一个 base.html，这是一个基础模板，里面放置通用的部分，例如：导航栏、页底等，其中网页可以继承它的通用部分。详情看例子。12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta name=&quot;description&quot; content=&quot;A layout example that shows off a blog page with a list of posts.&quot;&gt; &lt;title&gt;Blog&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/purecss@1.0.0/build/pure-min.css&quot; integrity=&quot;sha384-nn4HPE8lTHyVtfCBi5yW9d20FjT8BJwUXyWZT9InLYax14RDjBj46LmSztkmNP9w&quot; crossorigin=&quot;anonymous&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/purecss@1.0.0/build/grids-responsive-min.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css/layouts/blog.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;layout&quot; class=&quot;pure-g&quot;&gt; &lt;div class=&quot;sidebar pure-u-1 pure-u-md-1-4&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;h1 class=&quot;title&quot;&gt;BLOG&lt;/h1&gt; &lt;h2 class=&quot;brand-tagline&quot;&gt;Hello World&lt;/h2&gt; &lt;nav class=&quot;nav&quot;&gt; &lt;ul class=&quot;nav-list&quot;&gt; &lt;li class=&quot;nav-item&quot;&gt;&lt;a class=&quot;pure-button&quot; href=&quot;#&quot;&gt;home&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt;&lt;a class=&quot;pure-button&quot; href=&quot;#&quot;&gt;archives&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content pure-u-1 pure-u-md-3-4&quot;&gt; &lt;div&gt; &#123;% block content %&#125; &#123;% endblock %&#125; &lt;div class=&quot;footer&quot;&gt; &lt;div class=&quot;pure-menu pure-menu-horizontal&quot;&gt; &lt;ul&gt; &lt;li class=&quot;pure-menu-item&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;pure-menu-link&quot;&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;pure-menu-item&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;pure-menu-link&quot;&gt;Weibo&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;pure-menu-item&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;pure-menu-link&quot;&gt;RSS&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 讲解：我这里使用的是 pure 。这里简单介绍一下这位新朋友，来看看官网上对它的介绍：美国雅虎公司出品的一组轻量级、响应式纯css模块，适用于任何Web项目。pure 官网pure 中文网所以上面 link 链接的就是 pure 的代码，可以在 pure 官网或 pure 中文网上简单学习它的基础用法，不赘述。重点在于{% block content %}和{% endblock %}，它用来被其他 html 继承这个基类模板进行重写，等下我们写 home.html 时就不需要再写通用的左侧和页尾了，只需要继承自 base.html。 插播说一个 static 文件放置的问题，同样在 article 文件夹下新建 static 文件夹，用来放置 CSS 和 img把从 pure 下载的素材放到 static 文件夹下，那么刚刚写完的 base.html 就要做一些修改，让它正确引用 static里的 CSS，我在这个地方掉坑了，弄了很久 CSS 都渲染不出来，血和泪的教训才萌发要写这篇博文，见图：如图，在第 2 行加上{% load staticfiles %}表示加载 static 文件，在第 12 行 link 链接本地下载的 pure 素材要用{% static pure 素材存放的路径 %} 可以开始写 home.html 了讲解：第 2 行便是继承 base.html，第 4 行和第 24 行是成对的，中间包含的便是继承后的改写部分，第 6 行和第 22 行也是成对的，{% for post in post_list %}表示写的博文(标题、标签、正文)会传递到这里，这是 template 中提供的 for 循环。 接下来编辑 views.py 和 urls.py修改 views.py 并删除 test123456789from django.shortcuts import renderfrom django.http import HttpResponse from article.models import Article from datetime import datetime #Create your views here.def home(request): # new post_list = Article.objects.all() return render(request,&apos;home.html&apos;, &#123;&apos;post_list&apos;:post_list&#125;) 接下来编辑 views.py 和 urls.py修改 views.py 并删除 test 修改 urls.py123456789from django.conf.urls import urlfrom django.contrib import adminfrom article import views urppatterns = [ url(r&apos;^admin/&apos;,admin.site.urls), url(r&apos;^$&apos;,views.home), ] 现在重新访问127.0.0.1:8000 就能看到一个博客的框架了。截止目前，我们写了 base.html 和 home.html，同时也配置好了 views.py 和 urls.py。 继续不要停！我们希望每篇博文都有一个独立的页面，强大的 Django 给我们提供了动态 URL继续插播：”我把 Django 比作买了一块地自己动手一砖一瓦盖房子，而 hexo 就是精装的商品房，简单装修后即可拎包入住。所以说用 Django 搭博还是蛮累的～” 在 templates 文件夹下新建一个 post.html(用来显示单页博文的页面) 见图：讲解：第 2 行继承不必说了，第 5 行第 23 行成对出现，中间部分与 home.html 类似，不同的是加上去具体时间date:”Y-m-d”时间的形式随你喜欢。 修改 home.html 和 base.html 去掉循环加入动态链接和一些按钮。修改 home.html 见图： 讲解：第 9 行加入了{% url "detail" id=post.id %}，当点击这个文章题目时，会将对应的数据库对象的 id 传入的 url 中，将数据库对象唯一的 id 传送给 url 设置，url 取出这个 id 给对应的 view 中的函数逻辑当做参数。例如:点击博文标题的对象对应的 id=2，这个 id 被传送到 name=detail 的 url 中，’^(?P\d+)/$’正则表达式匹配后取出id，然后将 id 传送到 article.views.detail 作为函数参数，然后通过 get 方法获取对应的数据库对象，然后对模板进行渲染，发送到浏览器中.. 修改 base.html 主要是添加一些按钮12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!--base.html--&gt;&#123;% load staticfiles %&#125;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta name=&quot;description&quot; content=&quot;A layout example that shows off a blog page with a list of posts.&quot;&gt; &lt;title&gt;Blog&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/purecss@1.0.0/build/pure-min.css&quot; integrity=&quot;sha384-nn4HPE8lTHyVtfCBi5yW9d20FjT8BJwUXyWZT9InLYax14RDjBj46LmSztkmNP9w&quot; crossorigin=&quot;anonymous&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/purecss@1.0.0/build/grids-responsive-min.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;% static &apos;css/layouts/blog.css&apos; %&#125;&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;layout&quot; class=&quot;pure-g&quot;&gt; &lt;div class=&quot;sidebar pure-u-1 pure-u-md-1-4&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;h1 class=&quot;title&quot;&gt;BLOG&lt;/h1&gt; &lt;h2 class=&quot;brand-tagline&quot;&gt;Hello World&lt;/h2&gt; &lt;nav class=&quot;nav&quot;&gt; &lt;ul class=&quot;nav-list&quot;&gt; &lt;li class=&quot;nav-item&quot;&gt;&lt;a class=&quot;pure-button&quot; href=&quot;#&quot;&gt;home&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt;&lt;a class=&quot;pure-button&quot; href=&quot;#&quot;&gt;archives&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;br&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content pure-u-1 pure-u-md-3-4&quot;&gt; &lt;div&gt; &#123;% block content %&#125; &#123;% endblock %&#125; &lt;div class=&quot;footer&quot;&gt; &lt;div class=&quot;pure-menu pure-menu-horizontal&quot;&gt; &lt;ul&gt; &lt;li class=&quot;pure-menu-item&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;pure-menu-link&quot;&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;pure-menu-item&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;pure-menu-link&quot;&gt;Weibo&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;pure-menu-item&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;pure-menu-link&quot;&gt;RSS&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 接着编辑 views.py 和 urls.py修改 views.py1234567891011121314151617from django.shortcuts import renderfrom django.http import HttpResponse from article.models import Article from datetime import datetime from django.http import Http404 # new #Create your views here.def home(request): post_list = Article.objects.all() return render(request,&apos;home.html&apos;, &#123;&apos;post_list&apos;:post_list&#125;)def detail(request,id): # new try: post = Article.objects.get(id = str(id)) except Article.DoesNotExist: raise Http404 return render(request,&apos;post.html&apos;,&#123;&apos;post&apos;:post&#125;) 讲解：这里新加了一个找不到页面的 404 ，id 是每篇博文的唯一标识，使用 id 对数据库中的博文进行查找。 修改 urls.py12345678910from django.conf.urls import urlfrom django.contrib import adminfrom article import views urppatterns = [ url(r&apos;^admin/&apos;,admin.site.urls), url(r&apos;^$&apos;,views.home), url(r&apos;^(?P&lt;id&gt;\d+)/$&apos;,views.detail, name=&apos;detail&apos;), # new ] 讲解：现在可以访问 127.0.0.1:8000 点击对应的博文标题就能跳转到独立的页面中了。 小结：面对用户的请求，Django 做了以下工作， web 服务器收到一个 http 请求。 Django 在 urls.py 里查找对应的 views.py 函数来处理 http 请求。 views 函数调用不同的 Model 和 Templates 来完成最终展示界面。 views 函数返回 http 响应给 web 服务器。 三终于把最复杂的部分写完了，剩下的 7-11 点放到下一篇。继续加油！]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我用 Django 搭建博客的全过程(1)]]></title>
    <url>%2F2017%2F08%2F29%2F%E6%88%91%E7%94%A8Django%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B-1%2F</url>
    <content type="text"><![CDATA[一我最早是在 Django 上搭建博客的，后来发现需要购买域名和空间后再部署到线上，索性就转到 hexo+coding 来搭建博客了。所以接下来我将简单说一下这两者搭博的区别，只是我个人的感受，不一定专业。 二附上我在 README 上写的本项目将要实现的一些功能： 开发环境搭建 创建 Django 项目和 App 设计数据库 创建超级用户及后台管理 views 和 urls 的工作原理 Templates 模板 配置 MarkDown 归档，列出当前博客中所有文章并且显示时间 About 界面 标签分类 RSS 和分页、Readmore 我没做成功的：搜索功能 三1. 开发环境搭建Python、Django、Git 等这些就不用说了，贴一个我的开发环境（仅供参考，你可以有自己的配置）1234ubuntu16.04LTS # 我的操作系统Python 3.5.2Django 1.11.0Prue # 一个轻量级 CSS 模块，不需安装也可使用 安装方法网上很多，我不详述了。开门见山，直接去到第二点。 2. 创建 Django 项目和 App我并没有使用虚拟环境 Virtualenv，所以配置环境变量会有些区别。我按着我之前搭博的步骤来写这篇博文。12345$ mkdir site # 创建一个文件夹放博客的所有代码$ cd site/site $ django-admin startproject blog # 切换到 site 里创建 blog 项目/site/blog $ python3 manage.py startapp article # 切换到 blog 里创建 App：article注意：$ 前面表示所处的文件夹，比如：/site$ 就是切换到 site 文件夹内。 OK! 基本的已经搞定，这步完成便可查看整个项目的结构123456789101112131415/site $ lsblog/site/blog $ lsarticle blog manage.py db.sqlite3 (创建数据库后会有这个，现在步骤还没有它)/site/blog/blog $ ls # 第二个 blog 文件夹__init__.py __init.pyc__ settings.py settings.pyc urls.py wsgi.py 小提示：如果你也和我一样用python3 的版本，建议在 manage.py 的首行添加：#!/usr/bin/env python3设置 settings.py，把新增的’app’：article 加到 settings.py 的 INSTALLED_APPS 中。123456789INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;article&apos;, # new] 运行程序。1234$ python3 manage.py runserver运行成功It worked!Congratulations on your first Django-Powered page. 3.设计数据库 说一下数据库这块 Django 搭博和 hexo 搭博的区别，众所周知，hexo 搭建在 GitHub 或 Coding 的 Pages 服务上，所建博客都是静态的，而 Django 可以搭建一个动态的网站而不仅仅一个博客。这里不得不提一下 Django 强大的数据库功能：它利用 Python 的类继承，简单几行代码就能拥有一个丰富、动态的数据库操作接口(API)，每个 Django Model 都继承自 django.db.models.Model，在 Model 中每个属性(attribute)都代表一个 Datebase File，你也能通过 Django Model API 进行数据库的增、删、查、改操作。 Django 默认使用 SQLite3 数据库，你可以改用别的也可以不改，在 settings.py 里查看或修改数据库设置。现在来创建数据库，试想一下建立一个博客需要哪些要素，一个博客最基本应该具有以下这些：1234博客题目：title博客标签：category博客日期：date_time博客正文：content 说明：我是之后用了 hexo 才知道 category 和 tags 的区别，在 Django 里我把 category 当 tags 用了，如果觉得别扭你也可以把‘博客标签’改为’tags‘，不影响。 创建数据库，编辑 models.py 讲解：这里用到了 Python 中类的继承，str(self)函数 Article 对象要怎么表示自己，默认使用来表示对象，以上代码告诉系统使用‘title’来表示这个对象。 CharField 用于存储字符串，max_length 设置最大长度为 100 TextField 用于存储大量文本 DateTimeField 用于存储时间，auto_now_add 设置 True 表示自动设置对象增加时间 更新、同步数据库12$ python3 manage.py makemigrations$ python3 manage.py migrate 进入 Django Shell 对数据库进行增、删、改、查操作12345678910111213141516171819202122232425262728293031323334353637$ python3 manage.py shell # 进入 Django Shell &gt;&gt;&gt; from article.models import Article # 引入我们之前创建的数据库&gt;&gt;&gt; # create 数据库增加操作&gt;&gt;&gt; Article.objects.create(title = &apos;第一篇博文&apos;, category = &apos;other&apos;, content = &apos;第一篇内容&apos;)&lt;Article: Article objects&gt;&gt;&gt;&gt; Article.objects.all() # 查看全部对象，返回列表，无对象返回空列表&gt;&gt;&gt; Article.objects.get(id=1) # 返回符合条件的对象&gt;&gt;&gt; first = Article.objects.get(id=1)&gt;&gt;&gt; first.title # 获取对象的 title第一篇博文&gt;&gt;&gt; first.category # 获取对象的 category&gt;&gt;&gt; first.date_time # 获取对象的 date_time&gt;&gt;&gt; first.content # 获取对象的 content&gt;&gt;&gt; first.content = &apos;修改正文&apos; # 用点(.)操作修改&gt;&gt;&gt; # delete 数据库删除操作&gt;&gt;&gt; first.delete # 因为只创建了一个对象，删除后返回空列表&gt;&gt;&gt; # filter() 过滤操作&gt;&gt;&gt; Article.objects.filter(title=&apos;&apos;) # 按标题过滤&gt;&gt;&gt; Article.objects.filter(title=&apos;&apos;, id=&apos;&apos;) # 多个条件过滤&gt;&gt;&gt; # order 数据排序&gt;&gt;&gt; Article.objects.order_by(&quot;title&quot;) &gt;&gt;&gt; Article.objects.order_by(&quot;-title&quot;) # 倒序 &gt;&gt;&gt; # 连锁查询&gt;&gt;&gt; Article.objects.filter(title__contains=&apos;Django&apos;).order_by(&quot;-id&quot;)&gt;&gt;&gt; # 限制返回数据的数量&gt;&gt;&gt; Article.objects.filter(title__contains=&apos;Django&apos;)[0]&gt;&gt;&gt; Article.objects.filter(title__contains=&apos;Django&apos;)[0:3] 好吧，其实这些可以在 Django admin 后台管理界面里操作，超级方便的对博客内容增删改查。 4. 创建超级用户及后台管理1234$ python3 manage.py createsuperuserUsername:Email:Password: 特想说代码撸到这里，感觉英文都提高了不少呢！！继续，在 admin.py 中添加代码：1234from article.models import Article# Register your models here.admin.site.register(Artcile) 现在可以访问： 127.0.0.1:8000/admin (这是我分到的端口，你用你们自己的)输入之前设置的用户名和密码进入 admin 后台。 四好吧，写到这里发现实在太长了，决定分开来写。最后，我会加油写！]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自学编程的心路历程]]></title>
    <url>%2F2017%2F08%2F24%2F%E8%87%AA%E5%AD%A6%E7%BC%96%E7%A8%8B%E7%9A%84%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[去年的这个时候，也就是 2016 年 7 月我从办公室出来了，我就在想，往下我要干什么好呢，大概过了四天的时间我决定要开始学习编程，为了写公司的网站，为了能够进入这一行业从头开始。这是一个重要的决定，也是一个机会成本的取舍，当我选择这个的时候，注定要放弃其他很多机会，放弃成本的大小牵扯着内心煎熬的程度，毕竟在成功之前我不敢轻易放弃，是不敢放弃。 截止今日，我完成了 28 个 html 文档、11 个 CSS 文档、8 个 JavaScript 文档，再加上 4 张图片(images)，构成了我公司现在的网站，目前网站已经可以通过：http://www.taimingfawu.cn (太鸣法务官方网站) 访问。一年的时间得到这个结果，我已热泪盈眶，空气中都充满了深深的叹息：“好累啊！可我还是走到了这一步。”对于编程我确实是零基础，大学没学计算机专业，也没有参加过任何培训班，完全凭借兴趣爱好网上自学，因为感兴趣可能平时会比其他人多留意一些编程、代码方面的信息。接下来，我保证用最简洁最易懂的词语解释编程术语。(因为这篇文章最早是写在我微信公众号里，阅读者大多是编程外行。) 我最先在【网易云课堂】上找到了小甲鱼老师的 Python 入门课程，开始我第一次系统学习编程之路。Python 是一门编程语言，就像经常听说的 C 语言，Java 语言一样，它的语法更干净更简洁，如果有朋友说想要学习编程，我一定会推荐 Python 作为编程入门。和大多数编程语言一样，Python 也要学习变量、字符串、函数、分支和循环等。这个过程需要比较强的逻辑思维，我白天在网上听课晚上到论坛上做作业，经常完成不了作业，就到论坛上求教，把答案看懂了自己重新来做，有时答案我都要背下来了，题目还是只理解到 70%~80%，自信心每个晚上都被题目碾压！！这个阶段就像是苦行僧修行，很多个晚上都感到绝望。睡一觉第二天起来，太阳出来了，做题继续，修行继续。 过了三个月 Python 差不多可以 60~70 分毕业了，我开始放开思考：我要做一个网站，我需要做什么？正因为这个思考，让我认得到了一个全新的东西：Linux 操作系统。我打赌很多人都不知道这是什么。几乎每个人的台式电脑笔记本电脑工作电脑都是微软的 Windows 系统(WindowsXP、Windows7、Window10)，一点也不奇怪，我们从小在学校上的电脑课就是 Windows 系统，微软在东南亚差不多是商业垄断这么个情况。我也是不久前才知道有这么个除了 Windows、MacOS(苹果电脑操作系统)的第三个操作系统：Linux。我当时简直大开眼界，这个太神奇啦！ 我现在的笔记本电脑就用 Linux 系统中的 Ubuntu16.04LTS 版本，这是最接近国人使用习惯的一个系统版本，我的笔记本从双系统 Windows 和 Ubuntu 并存—&gt;只用 Ubuntu。说一个 Linux 和 Windows 的区别：Windows 操作系统只能在 x86 个人计算机上运作，在不同平台就无法运行了，而 Linux 是 Open Source(开放源代码)的操作系统，它的程序代码可以修改成适合在各种机器上运行。它的优点：操作系统可以免费获得，不需要杀毒软件，系统更稳定更安全(Linux 有一个影子团队，分布在全世界各个角落的 Linux 大牛都在为你维护你的 Linux 系统安全)。我说的这些大家可能感受不到，说一个最直观的，你用 Windows 一定不会忘记开机后杀杀毒，你花 3、4 千买一台电脑，除了硬件价格外，最贵的就是微软捆绑销售他自己的 Windows 系统(它是付费操作系统)。Linux 可以安装 WP 办公软件，可解决与同事 Windows 的 office 办公软件进行传输工作文件。关于 Linux 操作系统我不细说了，有兴趣的可以给我小窗口。(因为这篇文章最早是写在我微信公众号里，阅读者大多是编程外行。) 我用 Ubuntu 系统大半年了，至今没遇到解决不了要换 Windows 的问题。出于不习惯我用 Ubuntu 系统时也反复安装了十几次，学习路径有个小小的曲线。终于要说到写网页用到的前端知识和前端框架 Semantic-Ui 了。前端三剑客：HTML、CSS、JavaScript。HTML 是我们房子的房梁、承重墙、厨房厕所隔间等；CSS(样式)我们的沙发选布艺的还是红木的，餐桌方形的还是圆形的；JavaScript 比作家里的供电供水无线网络。HTML+CSS 可以写出一个静态网页，目前我的水平就到这里，HTML+CSS+JavaScript 能写出一个可交互的动态网页(比如淘宝页面的登录，支付环节)。未来我需要学习登录表单的设计、数据库的建立与同步、后台用户管理等，这些需要 JavaScript 的知识。 说两个我比较熟悉的 HTML 和 CSS。HTML 有 和 两部分，前一个里的信息给浏览器看的，我们在网页上看不到；后一个就是我们打开网页看到的全部内容。 里又分页头中部页尾，页头一般放 logo、标题、导航栏等，中部就是网页的主要内容，页尾就放版权声明、友情链接等。 我并没有很系统的学习这三点知识，很多时候都是尝试、模仿，然后一个一个 HTML 开始试着写，花了差不多 2 个月的时间，从学习 Semantic-ui 框架到网页的删删改改无数次到终于完工。写 HTML 文档还算好，写 CSS 文档的时候时时刻刻都在怀疑人生！！！！！ 这一个阶段结束了，下一个阶段的任务更艰巨，我要开始做运营做策划做文案做设计做宣传做推广，没有一个是擅长的，只有一点一点学一个一个做。编程我本来也是不会的啊，还通篇都是我最害怕的英文…… 好在，我还是看到了一个较好的结果。至少我也写出了一个像模像样的网站，反正最艰难的是我去年做出决定的那一天，那一天过去了，明天只会更加更加好！]]></content>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
</search>
